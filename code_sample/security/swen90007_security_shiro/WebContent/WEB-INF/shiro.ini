[main]

shiro.loginUrl = /login.jsp
shiro.postOnlyLogout = true
logout.redirectUrl = /home

#Data source
dataSource = org.postgresql.ds.PGSimpleDataSource
dataSource.url = jdbc:postgresql://127.0.0.1:5432/shirodb
dataSource.user = postgres
dataSource.password = postgres
dataSource.databaseName = shirodb

#Password matcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

#JDBC realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = false
jdbcRealm.authenticationQuery = SELECT user_password FROM users WHERE user_name = ?
jdbcRealm.userRolesQuery = SELECT user_role FROM users WHERE user_name = ?
jdbcRealm.dataSource = $dataSource
jdbcRealm.credentialsMatcher = $passwordMatcher

#Assign the realm to the security manager
securityManager.realms = $jdbcRealm

[users]
# format: username = password, role1, role2, ..., roleN
#user = password,user
#admin = password,admin

[roles]
# format: roleName = permission1, permission2, ..., permissionN
#admin = *
#user = *

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/logout = logout
/home/** = authc
/admin/** = authc, roles[admin]
/user/** = authc, roles[user]